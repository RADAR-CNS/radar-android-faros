/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.passive.faros;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Time between two successive R-peaks (RR-interval), as calculated by Faros device from the ECG signal. You can compute the heart rate as (60 / ibi). */
@org.apache.avro.specific.AvroGenerated
public class FarosHeartRateVariability extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6521570710027395247L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FarosHeartRateVariability\",\"namespace\":\"org.radarcns.passive.faros\",\"doc\":\"Time between two successive R-peaks (RR-interval), as calculated by Faros device from the ECG signal. You can compute the heart rate as (60 / ibi).\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"Device timestamp in UTC (s).\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"Device receiver timestamp in UTC (s).\"},{\"name\":\"interBeatInterval\",\"type\":\"float\",\"doc\":\"Duration (ms) of the detected inter beat interval.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FarosHeartRateVariability> ENCODER =
      new BinaryMessageEncoder<FarosHeartRateVariability>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FarosHeartRateVariability> DECODER =
      new BinaryMessageDecoder<FarosHeartRateVariability>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FarosHeartRateVariability> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FarosHeartRateVariability> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FarosHeartRateVariability>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FarosHeartRateVariability to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FarosHeartRateVariability from a ByteBuffer. */
  public static FarosHeartRateVariability fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Device timestamp in UTC (s). */
  @Deprecated public double time;
  /** Device receiver timestamp in UTC (s). */
  @Deprecated public double timeReceived;
  /** Duration (ms) of the detected inter beat interval. */
  @Deprecated public float interBeatInterval;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FarosHeartRateVariability() {}

  /**
   * All-args constructor.
   * @param time Device timestamp in UTC (s).
   * @param timeReceived Device receiver timestamp in UTC (s).
   * @param interBeatInterval Duration (ms) of the detected inter beat interval.
   */
  public FarosHeartRateVariability(java.lang.Double time, java.lang.Double timeReceived, java.lang.Float interBeatInterval) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.interBeatInterval = interBeatInterval;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return interBeatInterval;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: interBeatInterval = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return Device timestamp in UTC (s).
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * Device timestamp in UTC (s).
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return Device receiver timestamp in UTC (s).
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * Device receiver timestamp in UTC (s).
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'interBeatInterval' field.
   * @return Duration (ms) of the detected inter beat interval.
   */
  public java.lang.Float getInterBeatInterval() {
    return interBeatInterval;
  }

  /**
   * Sets the value of the 'interBeatInterval' field.
   * Duration (ms) of the detected inter beat interval.
   * @param value the value to set.
   */
  public void setInterBeatInterval(java.lang.Float value) {
    this.interBeatInterval = value;
  }

  /**
   * Creates a new FarosHeartRateVariability RecordBuilder.
   * @return A new FarosHeartRateVariability RecordBuilder
   */
  public static org.radarcns.passive.faros.FarosHeartRateVariability.Builder newBuilder() {
    return new org.radarcns.passive.faros.FarosHeartRateVariability.Builder();
  }

  /**
   * Creates a new FarosHeartRateVariability RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FarosHeartRateVariability RecordBuilder
   */
  public static org.radarcns.passive.faros.FarosHeartRateVariability.Builder newBuilder(org.radarcns.passive.faros.FarosHeartRateVariability.Builder other) {
    return new org.radarcns.passive.faros.FarosHeartRateVariability.Builder(other);
  }

  /**
   * Creates a new FarosHeartRateVariability RecordBuilder by copying an existing FarosHeartRateVariability instance.
   * @param other The existing instance to copy.
   * @return A new FarosHeartRateVariability RecordBuilder
   */
  public static org.radarcns.passive.faros.FarosHeartRateVariability.Builder newBuilder(org.radarcns.passive.faros.FarosHeartRateVariability other) {
    return new org.radarcns.passive.faros.FarosHeartRateVariability.Builder(other);
  }

  /**
   * RecordBuilder for FarosHeartRateVariability instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FarosHeartRateVariability>
    implements org.apache.avro.data.RecordBuilder<FarosHeartRateVariability> {

    /** Device timestamp in UTC (s). */
    private double time;
    /** Device receiver timestamp in UTC (s). */
    private double timeReceived;
    /** Duration (ms) of the detected inter beat interval. */
    private float interBeatInterval;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.passive.faros.FarosHeartRateVariability.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interBeatInterval)) {
        this.interBeatInterval = data().deepCopy(fields()[2].schema(), other.interBeatInterval);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FarosHeartRateVariability instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.passive.faros.FarosHeartRateVariability other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interBeatInterval)) {
        this.interBeatInterval = data().deepCopy(fields()[2].schema(), other.interBeatInterval);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Device timestamp in UTC (s).
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * Device receiver timestamp in UTC (s).
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * Device receiver timestamp in UTC (s).
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * Device receiver timestamp in UTC (s).
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * Device receiver timestamp in UTC (s).
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'interBeatInterval' field.
      * Duration (ms) of the detected inter beat interval.
      * @return The value.
      */
    public java.lang.Float getInterBeatInterval() {
      return interBeatInterval;
    }

    /**
      * Sets the value of the 'interBeatInterval' field.
      * Duration (ms) of the detected inter beat interval.
      * @param value The value of 'interBeatInterval'.
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder setInterBeatInterval(float value) {
      validate(fields()[2], value);
      this.interBeatInterval = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'interBeatInterval' field has been set.
      * Duration (ms) of the detected inter beat interval.
      * @return True if the 'interBeatInterval' field has been set, false otherwise.
      */
    public boolean hasInterBeatInterval() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'interBeatInterval' field.
      * Duration (ms) of the detected inter beat interval.
      * @return This builder.
      */
    public org.radarcns.passive.faros.FarosHeartRateVariability.Builder clearInterBeatInterval() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FarosHeartRateVariability build() {
      try {
        FarosHeartRateVariability record = new FarosHeartRateVariability();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.interBeatInterval = fieldSetFlags()[2] ? this.interBeatInterval : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FarosHeartRateVariability>
    WRITER$ = (org.apache.avro.io.DatumWriter<FarosHeartRateVariability>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FarosHeartRateVariability>
    READER$ = (org.apache.avro.io.DatumReader<FarosHeartRateVariability>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
